Rough write up of the thought process, not a step by step walkthrough

● Upon running function takes 2 parameters
● Upon disass of main we also see on main+37 mov(%eax), %eax which is what I
defineas “Attackers dream” while describing format string vulnerability for
exploitation with %n
● The second parameter is reflected back to us that means it goes through printf. I
know this by “./final AAAA BBBB” outputs “BBBB”
● Now we know printf is vulnerable to check that we will do “./final AAAA AAAA-%x
” and we will get AAAA-41414141
● So we're getting the input back on the first %X which is great.
● So it’s outputting the binary now we have to use %n thing to leverage that
vulnerability to run the print flag function.
● We get a segmentation fault if we replace %x by%n because AAAA or 41414141
is not a valid address.
● Im checking the global offset table for anything eye-catching by objdump -R final
● Didn't find putchar, which i was hoping to find
● These vulnerable operations are happening on the bazinga function as it
contains a vulnerable strcpy and a printf.
● We see that the first arg goes to that_fyi_was_sarcasm which has a buffer
overflow vulnerability because of strcpy. I got a segmentation fault on a large
input.
● There is a function called print_flag which is called by the function
I_should_have_the_flag
● So we have to manipulate control to that place.
● 1st arg goes to that_fyi_was_sarcasm and 2nd aarg goes to bazinga
● I’ll try to find a jmp statement i can exploit by doing something
● I guess I’ll have to jump too that function straight from fmt vuln
● Everything done till now is in the first figure.
● Now I’ll try to craft exploit
● Now i created a perl script named pl.pl which gives us pl you can see this in the
second picture I got the ret addr of the function in gdb by typing info functions.
● Running this perl script on it’s own in gd we get a gibberish flag. (in the first arg
perl script and the second arg AAAA)
● Now for the second argument we’ll leverage the fmt string vuln
● We see that 0804a0c is the key in gdb
● But we cant access it directly so we use that at the top of printf as our address to
where we want to go and now for the content of the same we have to use 274
%u but were already writing5 bytes 4 as the addr and ‘-’ so we use 269%u and
our second arg becomes as follows
● `perl -e 'print "\x2c\xa0\x04\x08"'`-%269u-%1\$n
● %1\$n is because remember that we got 41414141 on the first time %x
● Now everything together gives us flag.
